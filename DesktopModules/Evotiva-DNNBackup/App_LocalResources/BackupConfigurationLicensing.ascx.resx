<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FullTrust.Text" xml:space="preserve">
    <value />
  </data>
  <data name="NotFullTrust.Text" xml:space="preserve">
    <value />
  </data>
  <data name="lnkEmailBody.Text" xml:space="preserve">
    <value>%0A%0A PLEASE PROVIDE THIS INFORMATION %20
%0A%0A Comments (optional):%20
%0A%0A Licensed to (Name):%20
%0A%0A Licensed to (Email):%20
%0A%0A Your Phone (optional):%20
%0A%0A Invoice Number:%20
%0A%0A%0A LICENSE AND UTILIZATION INFORMATION %20
%0A%0A Domain (Base URL):%20{0}
%0A%0A{1}

</value>
  </data>
  <data name="lblLnkEmailDescription.Text" xml:space="preserve">
    <value>(opens an email)</value>
  </data>
  <data name="lnkEmailAltHelp.Text" xml:space="preserve">
    <value>(use it if the main link does not open in your email client)&lt;br /&gt;
&lt;b&gt;Note:&lt;/b&gt; If your machine cannot open 'mailto' links, please use your web email account to send us an email to 'licensing@evotiva.com' specifying the 'Current Domain (base URL)' and your purchase Invoice Number.</value>
  </data>
  <data name="lnkEmailSubject.Text" xml:space="preserve">
    <value>[{0}]%20-%20Request%20License%20Assistance%20({1})</value>
  </data>
  <data name="ModuleInformation.Message" xml:space="preserve">
    <value>&lt;b&gt;Module Name: &lt;/b&gt;&lt;MODULENAME&gt;
&lt;br /&gt;&lt;b&gt;Module Version: &lt;/b&gt;&lt;MODULEVERSION&gt;
&lt;br /&gt;&lt;b&gt;DotNetNuke Version: &lt;/b&gt;&lt;DNNVERSION&gt;
&lt;br /&gt;&lt;b&gt;.NET Framework: &lt;/b&gt;&lt;DOTNET&gt;
&lt;br /&gt;&lt;b&gt;Full Trust: &lt;/b&gt;&lt;FULLTRUST&gt;
&lt;br /&gt;&lt;b&gt;Permissions: &lt;/b&gt;&lt;PERMISSIONS&gt;
&lt;br /&gt;&lt;b&gt;Impersonate: &lt;/b&gt;&lt;IMPERSONATE&gt;
&lt;br /&gt;&lt;b&gt;ASP.NET Identity: &lt;/b&gt;&lt;IDENTITY&gt;
&lt;br /&gt;&lt;b&gt;Database information: &lt;/b&gt; &lt;DATABASEINFO&gt;</value>
  </data>
  <data name="LicenseInvalidDomain.Message" xml:space="preserve">
    <value>&lt;br /&gt;- Invalid domain or domain mismatch.</value>
  </data>
  <data name="LicenseInvalidProduct.Message" xml:space="preserve">
    <value>&lt;br /&gt;- Invalid product/version name or product/version mismatch.</value>
  </data>
  <data name="LicenseInvalidServerSignature.Message" xml:space="preserve">
    <value>&lt;br /&gt;- Invalid server signature or server signature mismatch.</value>
  </data>
  <data name="LicenseExpires.Message" xml:space="preserve">
    <value>&lt;br /&gt;- License expires on (yyyymmdd) &lt;EXPIREDATE&gt;</value>
  </data>
  <data name="LicenseExpired.Message" xml:space="preserve">
    <value>&lt;br /&gt;- License has expired.</value>
  </data>
  <data name="MaintenanceExpired.Message" xml:space="preserve">
    <value>&lt;br /&gt;- Maintenance has expired.</value>
  </data>
  <data name="LicenseInvalid.Message" xml:space="preserve">
    <value>&lt;br /&gt;Your License Key is invalid or corrupt. 
Please contact support using the Request License Assistance link below. 
If you completely delete the License Key, a functional FREE Key will be recreated (valid on any "localhost" or "*.local" site. e.g. localhost/mytestsite or mytestsite.local.</value>
  </data>
  <data name="Active.Text" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="lnkEmailAlt.Text" xml:space="preserve">
    <value>Alternate Link</value>
  </data>
  <data name="Any.Text" xml:space="preserve">
    <value>Any</value>
  </data>
  <data name="ControlTitle_backupconfigurationlicensing.Text" xml:space="preserve">
    <value>Backup Configuration - Licensing</value>
  </data>
  <data name="lblCurrentDomain.Text" xml:space="preserve">
    <value>Current Domain (base URL)</value>
  </data>
  <data name="lblCurrentDomain.Help" xml:space="preserve">
    <value>Domain name (base URL) for which the module expects to have a valid license key.</value>
  </data>
  <data name="lblModuleInfo.Text" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="lblLicense.Text" xml:space="preserve">
    <value>License</value>
  </data>
  <data name="lblLicenseStatus.Text" xml:space="preserve">
    <value>License Details</value>
  </data>
  <data name="lblLicenseStatus.Help" xml:space="preserve">
    <value>License Details.</value>
  </data>
  <data name="lblLicenseKey.Text" xml:space="preserve">
    <value>License Key</value>
  </data>
  <data name="lblLicenseKey.Help" xml:space="preserve">
    <value>License Key (get it at licensing@evotiva.com).</value>
  </data>
  <data name="dshLicensing.Text" xml:space="preserve">
    <value>License Key and Details</value>
  </data>
  <data name="lblLicense.Help" xml:space="preserve">
    <value>Licensing information.</value>
  </data>
  <data name="LicensiongOptions.Text" xml:space="preserve">
    <value>Licensing Options</value>
  </data>
  <data name="lblModuleInfo.Help" xml:space="preserve">
    <value>Module and context information.</value>
  </data>
  <data name="No.Text" xml:space="preserve">
    <value>no</value>
  </data>
  <data name="None.Text" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="LicenseContactSupport.Message" xml:space="preserve">
    <value>Please contact Support using the link below if you have any license problems or questions.</value>
  </data>
  <data name="LicenseValid.Message" xml:space="preserve">
    <value>Registered to [&lt;USER&gt;] ([&lt;KEY&gt;]) for:
&lt;ul&gt;
&lt;li&gt;[&lt;PRODUCT&gt;] Product &lt;/li&gt;
&lt;li&gt;[&lt;VERSION&gt;] Version &lt;/li&gt;
&lt;li&gt;[&lt;DOMAIN&gt;] Domain (Base URL)&lt;/li&gt;
&lt;li&gt;[&lt;SERVERSIGNATURE&gt;] Server Signature&lt;/li&gt;
&lt;li&gt;[&lt;EXPIREDATE&gt;] License Expiration Date&lt;/li&gt;
&lt;li&gt;[&lt;MAINTDATE&gt;] Maintenance Expiration Date&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="lnkEmail.Text" xml:space="preserve">
    <value>Request License Assistance</value>
  </data>
  <data name="lnkEmailToolTip.Text" xml:space="preserve">
    <value>Request License Assitance</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="lblCurrentServerSignature.Text" xml:space="preserve">
    <value>Server Signature</value>
  </data>
  <data name="lblCurrentServerSignature.Help" xml:space="preserve">
    <value>Server Signature.</value>
  </data>
  <data name="lnkEmailTo.Text" xml:space="preserve">
    <value>support@evotiva.com</value>
  </data>
  <data name="Total.Text" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="Unlimited.Text" xml:space="preserve">
    <value>unlimited</value>
  </data>
  <data name="cmdUpdate.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="LicenseExpiresWarning.Message" xml:space="preserve">
    <value>Your {0} license {1} on [{2}].&lt;br /&gt;
Please use the 'Request License Assistance' link found below to request a new key.</value>
  </data>
  <data name="cmdUploadUpdate.Text" xml:space="preserve">
    <value>Upload and Update</value>
  </data>
  <data name="UploadConfirmation.Text" xml:space="preserve">
    <value>Update the current license key with the contents of the selected file to be uploaded?</value>
  </data>
  <data name="UploadErrorFileNameEmpty.Text" xml:space="preserve">
    <value>Please select a valid license file to upload (a  text file (.TXT) is expected).</value>
  </data>
  <data name="UploadErrorFileType.Text" xml:space="preserve">
    <value>The chosen file is not of the expected file type. Note: a plain text file is expected,  not a ZIP or any other file format.</value>
  </data>
  <data name="cmdReset.Text" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="LicenseExpiresMaintenanceWarning.Message" xml:space="preserve">
    <value>The maintenance period (where you can download and install for free new versions of the module) for your &lt;strong&gt;PERPETUAL&lt;/strong&gt; license {0} on [{1}].&lt;br /&gt;
If you would like to install newer versions of the module released after this date, you'll need a new key.</value>
  </data>
  <data name="ResetConfirmation.Text" xml:space="preserve">
    <value>Reset the license to be the default built-in free edition key?</value>
  </data>
  <data name="lblLicenseKeyMessage.Text" xml:space="preserve">
    <value>Paste in this text box the contents of the license file you've got from Evotiva.</value>
  </data>
  <data name="UpdateConfirmation.Text" xml:space="preserve">
    <value>Update (save) the license key?</value>
  </data>
</root>