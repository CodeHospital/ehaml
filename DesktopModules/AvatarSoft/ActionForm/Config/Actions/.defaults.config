<?xml version="1.0" encoding="utf-8"?>
<Actions>

    <!--<Action>
        <Id>ForgotPassword</Id>
        <Title>
            <Item key="default">Forgot Password</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action requires an email or username field and a password field to be present in the form in order to login the user.
                On successfull login, access user info using the [User:*] tokens (for example [User:UserID] or [User:FirstName]).
            </Item>
        </HelpText>
        <Settings>
            <Group>User</Group>
        </Settings>
        <TypeStr>avt.ActionForm.Core.Actions.ForgotPassword, avt.ActionForm.Core</TypeStr>

        <Parameter>
            <Id>PasswordRetrievalMethod</Id>
            <Title>
                <Item key="default">Password retrieval method.</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <Items>{ "retrieve": { "default": "retrieve password" }, "random": { "default": "generate random password" }, "link": { "default": "generate reset link" }}</Items>
            </Settings>
            <DefaultValue>
                <Item key="default">0</Item>
            </DefaultValue>
            <HelpText>
                <Item key="default">Password retrieval method.</Item>
            </HelpText>
        </Parameter>


        <Parameter>
            <Id>UsernameorEmail</Id>
            <Title>
                <Item key="default">Choose username or email</Item>
            </Title>
            <HelpText>
                <Item key="default">Choose username or email field.</Item>

            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>open-text</FieldType>
            </Settings>
        </Parameter>

        --><!--<Parameter>
			<Id>EmailField</Id>
			<Title>
				<Item key="default">Choose email</Item>
			</Title>
			<HelpText>
				<Item key="default">Choose username or email field.</Item>

			</HelpText>
			<Type>FieldSelect</Type>
			<Settings>
				<FieldType>open-email</FieldType>
			</Settings>
		</Parameter>--><!--

        --><!--<Parameter>
			<Id>PasswordReset</Id>
			<Title>
				<Item key="default">Password reset</Item>
			</Title>
			<HelpText>
				<Item key="default">Password reset.</Item>

			</HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>open-password</FieldType>
            </Settings>
		</Parameter>
		
		<Parameter>
			<Id>PasswordConfirm</Id>
			<Title>
				<Item key="default">Password confirm</Item>
			</Title>
			<HelpText>
				<Item key="default">Password confirm.</Item>

			</HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>open-password</FieldType>
            </Settings>
		</Parameter>--><!--

        <Parameter>
            <Id>Question</Id>
            <Title>
                <Item key="default">Question</Item>
            </Title>

            <HelpText>
                <Item key="default">
                    Question.
                </Item>
            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>open-text</FieldType>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>Answer</Id>
            <Title>
                <Item key="default">Answer</Item>
            </Title>

            <HelpText>
                <Item key="default">
                    Answer.
                </Item>
            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>open-text</FieldType>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>TokenNameRetrievePassword</Id>
            <Title>
                <Item key="default">Retrieve Password Token Name</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">Optionally provide a token name where to store the Retrieved Password, that is needed later in another action.</Item>
            </HelpText>
        </Parameter>
        <Parameter>
            <Id>TokenNameRandomPassword</Id>
            <Title>
                <Item key="default">Random Password Token Name</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">Optionally provide a token name where to store the Random Password, that is needed later in another action.</Item>
            </HelpText>
        </Parameter>
        <Parameter>
            <Id>TokenNameResetLink</Id>
            <Title>
                <Item key="default">Reset Link Token Name</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">Optionally provide a token name where to store the Reset Link, that is needed later in another action.</Item>
            </HelpText>
        </Parameter>


    </Action>-->

    <Action>
        <Id>UserLogin</Id>
        <Title>
            <Item key="default">User Login</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action requires an email or username field and a password field to be present in the form in order to login the user.
                On successfull login, access user info using the [User:*] tokens (for example [User:UserID] or [User:FirstName]).
            </Item>
        </HelpText>
        <Settings>
            <Group>User</Group>
        </Settings>
        <TypeStr>avt.ActionForm.Core.Actions.UserLogin, avt.ActionForm.Core</TypeStr>
    </Action>

    <Action>
        <Id>UserRegistration</Id>
        <Title>
            <Item key="default">User Registration</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action will create a new user account.
                The form must contain at least an username or email address.
                The password can be collected via a password field or randomly generated.
                On successfull registration, access user info using the [NewUserId] and [User:*] tokens (for example [User:UserID] or [User:FirstName]).
            </Item>
        </HelpText>
        <Settings>
            <Group>User</Group>
        </Settings>
        <TypeStr>avt.ActionForm.Core.Actions.UserRegistration, avt.ActionForm.Core</TypeStr>

        <Parameter>
            <Id>EmailUsername</Id>
            <Title>
                <Item key="default">Email as Username</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">When this option is disabled, Action Form looks for a username field in the form.</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>RandomPass</Id>
            <Title>
                <Item key="default">Generate random password</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">Enable this option to have Action Form generate a random password. This basically replaces the password fields. The generated password is stored in [RegRandomPass] token so you can use it for example in an email action.</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>SendDnnMail</Id>
            <Title>
                <Item key="default">Send standard DNN registration email</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">When this option is enabled Action Form will use the standard registration email from DNN. For custom emails, disable this option and add Email actions.</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>LoginIfExists</Id>
            <Title>
                <Item key="default">Login if user already exists</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">When this option is enabled, instead of throwing an error Action Form tries to login the user using the username and password provided. If authentication is successfull, then Action Form continues with the rest of the actions.</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Authorization</Id>
            <Title>
                <Item key="default">Authorize users who register with this form.</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <Items>{ "Authorize": { "default": "Authorize" }, "NoAuthorize": { "default": "Don't Authorize" }, "Inherit": { "default": "Inherit DNN Settings" }}</Items>
            </Settings>
            <DefaultValue>
                <Item key="default">Authorize</Item>
            </DefaultValue>
            <HelpText>
                <Item key="default">When this option is enabled, users that will register with this Action Form will be authorized. </Item>
            </HelpText>
        </Parameter>
    </Action>

    <Action>
        <Id>UpdateUserProfile</Id>
        <Title>
            <Item key="default">Update User Profile</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action will instruct Action Form to update all fields in the profile of current user that are named the same as the form fields. Action Form will try to match profile properties both with and without spaces between words.
                <b>Important!</b> Note that profile property names are case sensitive!
            </Item>
        </HelpText>
        <Settings>
            <Group>User</Group>
        </Settings>
        <TypeStr>avt.ActionForm.Core.Actions.UpdateUserProfile, avt.ActionForm.Core</TypeStr>

        <Parameter>
            <Id>UpdatePassword</Id>
            <Title>
                <Item key="default">Allow password update</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">If there's a password field on the form, Action Form will also update the password for the current user.</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>UpdateDisplayName</Id>
            <Title>
                <Item key="default">Also update Display Name with</Item>
            </Title>
            <HelpText>
                <Item key="default">If there's a password field on the form, Action Form will also update the password for the current user.</Item>

            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>open-text</FieldType>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>UpdateEmail</Id>
            <Title>
                <Item key="default">Update Email with</Item>
            </Title>
            <HelpText>
                <Item key="default">Select an email field from the form to set as the current user email.</Item>
            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>open-email</FieldType>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>OvewriteImages</Id>
            <Title>
                <Item key="default">Ovewrite Images</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">
                    If the form contains upload fileds that map to user profile, such as the Photo property,
                    enabling this option will have Action Form overwrite existing file instead of creating a new one.
                </Item>
            </HelpText>
        </Parameter>
    </Action>

    <Action>
        <Id>RunSql</Id>
        <Title>
            <Item key="default">Run SQL Query</Item>
        </Title>
        <HelpText>
            <Item key="default">
                Executes the specified SQL query, optionally storing the output for use in other actions.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.ExecuteSql, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Data</Group>
        </Settings>

        <Parameter>
            <Id>ConnectionString</Id>
            <Title>
                <Item key="default">Other Connection String</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">Leave this field empty to use the connection string from DNN.</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>SqlQuery</Id>
            <Title>
                <Item key="default">SQL Query</Item>
            </Title>
            <Type>Code</Type>
            <HelpText>
                <Item key="default">
                    SQL to execute. Can contain <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>OutputTokenName</Id>
            <Title>
                <Item key="default">Output Token Name</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">Optionally provide a token name where to store the output generated by the SQL query. For example, store IDs generated by inserts or select data that is needed by other actions.</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>ExtractColumns</Id>
            <Title>
                <Item key="default">Extract Columns</Item>
            </Title>
            <Type>NameValueCollection</Type>
            <HelpText>
                <Item key="default">
                    Optionally provide an association table to parse columns into context data.
                    Can contain other context tokens, for example [Name], and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
            <Settings>
                <NameColumn>Column Name</NameColumn>
                <ValueColumn>Store As</ValueColumn>
                <ButtonName>Extract More Data</ButtonName>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>ShowErrors</Id>
            <Title>
                <Item key="default">Show Errors</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">
                    Show errors raised from SQL. This is useful for example if the error is a nicely formatted error message.
                    Note that if this option is turned on, admins will always get a full error message and regular users will get a generic error message.
                </Item>
            </HelpText>
        </Parameter>

    </Action>

    <Action>
        <Id>GrantUserRole</Id>
        <Title>
            <Item key="default">Grant User Role</Item>
        </Title>
        <HelpText>
            <Item key="default">
                Grants user with the specified security role. The expiration time is reset for each submit.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.GrantRole2, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>User</Group>
        </Settings>

        <Parameter>
            <Id>RoleId</Id>
            <Title>
                <Item key="default">Role</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>Roles</DataSource>
            </Settings>
            <HelpText>
                <Item key="default">Select the security role to grant.</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>RoleNames</Id>
            <Title>
                <Item key="default">Other Role Names</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    This allows to freely input the role names, so you can also use DNN tokens and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                    If multiple roles are specified, separate them by comma.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>RoleExpiration</Id>
            <Title>
                <Item key="default">Role Expiration (days)</Item>
            </Title>
            <Type>Number</Type>
            <HelpText>
                <Item key="default">Select after how many days will the role expire. Leave blank to never expire.</Item>
            </HelpText>
        </Parameter>

    </Action>

    <Action>
        <Id>RevokeUserRole</Id>
        <Title>
            <Item key="default">Revoke User Role</Item>
        </Title>
        <HelpText>
            <Item key="default">
                Revokes the specified security role from current user.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.RevokeRole, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>User</Group>
        </Settings>

        <Parameter>
            <Id>RoleId</Id>
            <Title>
                <Item key="default">Role</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>Roles</DataSource>
            </Settings>
            <HelpText>
                <Item key="default">Select the security role to revoke.</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>RoleNames</Id>
            <Title>
                <Item key="default">Other Role Names</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    This allows to freely input the role names, so you can also use DNN tokens and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                    If multiple roles are specified, separate them by comma.
                </Item>
            </HelpText>
        </Parameter>

    </Action>

    <Action>
        <Id>PostData</Id>
        <Title>
            <Item key="default">Server Request</Item>
        </Title>
        <HelpText>
            <Item key="default">
                Posts form data to a different server.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.ServerRequest, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Data</Group>
        </Settings>

        <FooterHtml>
            <![CDATA[
                <div style="text-align: center">
                    <a href="#" class="" onclick="testPostNotification($(this).parents('.action-root:first')); return false;">Test POST Notification</a>
                </div>
            ]]>
        </FooterHtml>

        <JsFunctions>
            <![CDATA[
            <script>
                function testPostNotification($root) {
                    var w = window.open("", "_blank");
                    var d = w.document;
                    d.write("<form method='post' action=\""+ $root.find(".url").val() +"\">");
                    d.write("<table cellpadding='3'>");
                    var params = $root.find(".code").val().split('\n');
                    for (var i=0; i<params.length; i++) {
                        var parts = params[i].split('=');
                        d.write("<tr>");
                        d.write("<td>");
                        d.write(parts[0]);
                        d.write("</td>");
                        d.write("<td>");
                        d.write("<input type='text' name='"+ parts[0] +"' value='"+ parts[1] +"' />");
                        d.write("</td>");
                        d.write("</tr>");
                    }
                    d.write("</table>");

                    d.write("<input type='submit' value='Submit' />");
                    d.write("</form>");
                }
            </script>
            ]]>
        </JsFunctions>

        <Parameter>
            <Id>URL</Id>
            <Title>
                <Item key="default">URL</Item>
            </Title>
            <Type>URL</Type>

            <DefaultValue>
                <Item key="default">http://example.com</Item>
            </DefaultValue>

            <HelpText>
                <Item key="default">
                    URL where to post data. Can contain form tokens (for example [FirstName]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Data</Id>
            <Title>
                <Item key="default">Post Data</Item>
            </Title>
            <Type>Code</Type>

            <DefaultValue>
                <Item key="default">name=[FirstName]&#13;page=[Tab:TabName]</Item>
            </DefaultValue>

            <HelpText>
                <Item key="default">
                    Put key=value pairs each on separate line.
                    URL where to post data. Can contain form tokens (for example [FirstName]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Headers</Id>
            <Title>
                <Item key="default">Headers</Item>
            </Title>
            <Type>NameValueCollection</Type>
            <HelpText>
                <Item key="default">
                    Additional HTTP headers to pass
                </Item>
            </HelpText>
            <Settings>
                <NameColumn>Name</NameColumn>
                <ValueColumn>Value</ValueColumn>
                <ButtonName>Add</ButtonName>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>HttpMethod</Id>
            <Title>
                <Item key="default">Choose an HTTP Method</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <Items>{ "POST": { "default": "POST" }, "PUT": { "default": "PUT" }, "GET": { "default": "GET" }, "DELETE": { "default": "DELETE" } }</Items>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>SaveToken</Id>
            <Title>
                <Item key="default">Output Token Name</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">Specify a token name to save the post respone into. You can access it later using the token syntax, for example [MyNamedTPostoken]</Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>IgnoreErrors</Id>
            <Title>
                <Item key="default">Ignore Errors</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">
                    Continues executiong of the rest of the actions.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>OnError</Id>
            <Title>
                <Item key="default">On Error</Item>
            </Title>
            <Type>ActionList</Type>
            <Settings>
                <Event>error</Event>
            </Settings>
            <HelpText>
                <Item key="default">
                    Define a list of actions that should execute when this actions results in error.
                </Item>
            </HelpText>
        </Parameter>

    </Action>

    <Action>
        <Id>Regex</Id>
        <Title>
            <Item key="default">Regex</Item>
        </Title>
        <HelpText>
            <Item key="default">
                Parse multiple values at once from same Input
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.RegexParser, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Parsing</Group>
        </Settings>

        <Parameter>
            <Id>Input</Id>
            <Title>
                <Item key="default">Input</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Data</Id>
            <Title>
                <Item key="default">Parse Data</Item>
            </Title>
            <Type>NameValueCollection</Type>
            <HelpText>
                <Item key="default">
                    Provide a list of rules to parse the Input expression (which can be a token that contains the value from another field or action) into new tokens.
                    Use these new tokens in subsequent actions.
                    If the match contains subgroups, then the first subgroup will be extracted instead of the whole match.
                </Item>
            </HelpText>
            <Settings>
                <NameColumn>Store in Token</NameColumn>
                <ValueColumn>Regex Pattern</ValueColumn>
                <ButtonName>Add</ButtonName>
            </Settings>
        </Parameter>

    </Action>

    <Action>
        <Id>SendMail</Id>
        <Title>
            <Item key="default">Send Email</Item>
        </Title>
        <HelpText>
            <Item key="default">
                Note that you can use [Email] to get the email address that was submitted with the form or [User:Email] to get the email address of the currently logged in user.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.SendMail, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Email</Group>
        </Settings>

        <Parameter>
            <Id>From</Id>
            <Title>
                <Item key="default">From</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Leave empty to use the system default. Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>To</Id>
            <Title>
                <Item key="default">To</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Separate multiple recipients by semicolon ";". Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>DetermineEmail</Id>
            <Title>
                <Item key="default">Determine Email Automatically</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">
                    If <em>To</em> field above is empty, Action Form will determine email from submitted data or based on currently logged in user.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>ReplyTo</Id>
            <Title>
                <Item key="default">Reply To</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Separate multiple recipients by semicolon ";". Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Cc</Id>
            <Title>
                <Item key="default">CC</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Separate multiple recipients by semicolon ";". Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Bcc</Id>
            <Title>
                <Item key="default">BCC</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Separate multiple recipients by semicolon ";". Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Subject</Id>
            <Title>
                <Item key="default">Subject</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Format</Id>
            <Title>
                <Item key="default">Format</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <Items>{ "Html": { "default": "Html" }, "Text": { "default": "Text" } }</Items>
            </Settings>
            <DefaultValue>
                <Item key="default">Html</Item>
            </DefaultValue>
        </Parameter>

        <Parameter>
            <Id>Body</Id>
            <Title>
                <Item key="default">Body</Item>
            </Title>
            <Type>RichText</Type>
            <HelpText>
                <Item key="default">
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>


        <Parameter>
            <Id>PortalFiles</Id>
            <Title>
                <Item key="default">Attach Portal Files</Item>
            </Title>
            <Type>FilePicker</Type>
        </Parameter>



        <Parameter>
            <Id>FileField1</Id>
            <Title>
                <Item key="default">Attach Field #1</Item>
            </Title>
            <HelpText>
                <Item key="default">Select an upload field to send as attachment</Item>
            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>upload.single</FieldType>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>FileField2</Id>
            <Title>
                <Item key="default">Attach Field #2</Item>
            </Title>
            <HelpText>
                <Item key="default">Select an upload field to send as attachment</Item>
            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>upload.single</FieldType>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>FileField3</Id>
            <Title>
                <Item key="default">Attach Field #3</Item>
            </Title>
            <HelpText>
                <Item key="default">Select an upload field to send as attachment</Item>
            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>upload.single</FieldType>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>FileField4</Id>
            <Title>
                <Item key="default">Attach Field #4</Item>
            </Title>
            <HelpText>
                <Item key="default">Select an upload field to send as attachment</Item>
            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>upload.single</FieldType>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>FileField5</Id>
            <Title>
                <Item key="default">Attach Field #5</Item>
            </Title>
            <HelpText>
                <Item key="default">Select an upload field to send as attachment</Item>
            </HelpText>
            <Type>FieldSelect</Type>
            <Settings>
                <FieldType>upload.single</FieldType>
            </Settings>
        </Parameter>




        <!--<Parameter>
            <Id>File1</Id>
            <Title>
                <Item key="default">Attach Portal File #1</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>PortalFiles</DataSource>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>File2</Id>
            <Title>
                <Item key="default">Attach Portal File #2</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>PortalFiles</DataSource>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>File3</Id>
            <Title>
                <Item key="default">Attach Portal File #3</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>PortalFiles</DataSource>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>File4</Id>
            <Title>
                <Item key="default">Attach Portal File #4</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>PortalFiles</DataSource>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>File5</Id>
            <Title>
                <Item key="default">Attach Portal File #5</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>PortalFiles</DataSource>
            </Settings>
        </Parameter>-->



        <Parameter>
            <Id>FileToken1</Id>
            <Title>
                <Item key="default">Attach from Token</Item>
            </Title>
            <HelpText>
                <Item key="default">
                    This lets you compute file path from token. It must be relative to portal home folder.
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                    Multiple items must be separated by semicolons.
                </Item>
            </HelpText>
            <Type>Text</Type>
        </Parameter>

        <Parameter>
            <Id>IgnoreErros</Id>
            <Title>
                <Item key="default">Ignore Errors</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">
                    If errors are ignored, the submission of the form continues even when there is an error sending the email.
                    Otherwise, an error message will be displayed to the user.
                    Note that if the email is being sent async or is placed in a pickup folder, errors won't be caught.
                </Item>
            </HelpText>
        </Parameter>

    </Action>


    <!--<Action>
        <Id>SaveReportDb</Id>
        <Title>
            <Item key="default">Save Report in database</Item>
        </Title>
        <HelpText>
            <Item key="default">
                Saves report in database. 
                Reports can be also accessed by using Module Actions &gt; Reports in main view. 
                -->
    <!--<a href="{{ReportLink}}">Click here</a> to go there directly.-->
    <!--
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.SaveReport, avt.ActionForm.Core</TypeStr>

    </Action>-->


    <Action>
        <Id>PaypalPayment</Id>
        <Title>
            <Item key="default">Collect PayPal Payment</Item>
        </Title>
        <HelpText>
            <Item key="default">
                Redirect to PayPal to collect payment.
                All actions placed under this one will be executed after <strong>payment is complete</strong>.
                Only place actions that don't require UI below this action. If you need to display a message, add a Redirect to Page action.
                <br/>>
                <strong>Important: </strong>This action is obsolete. It has been replaced by a separate add-on.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.CollectPaymentWithPayPal, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Payments</Group>
        </Settings>

        <Parameter>
            <Id>SandboxAccount</Id>
            <Title>
                <Item key="default">Sandbox Account Email</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>LiveAccount</Id>
            <Title>
                <Item key="default">Live Account Email</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>TestMode</Id>
            <Title>
                <Item key="default">Test Mode</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">
                    Enable this option to use the Sandbox account for testing.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Recurring</Id>
            <Title>
                <Item key="default">Recurring</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>RecurringPayments</DataSource>
            </Settings>
            <HelpText>
                <Item key="default">
                    This option allows creation of one time payments or subscriptions.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>ItemTitle</Id>
            <Title>
                <Item key="default">Item Title</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>CurrencyCode</Id>
            <Title>
                <Item key="default">Currency Code</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>Currency</DataSource>
            </Settings>
            <HelpText>
                <Item key="default">
                    Supported currencies are defined /DesktopModules/Actions/Config/Currency.xml.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Amount</Id>
            <Title>
                <Item key="default">Amount</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>CancelPageId</Id>
            <Title>
                <Item key="default">Cancel Page</Item>
            </Title>
            <HelpText>
                <Item key="default">
                    The user is redirected to this page when canceling the checkout process in PayPal.
                </Item>
            </HelpText>
            <Type>Select</Type>
            <Settings>
                <DataSource>PortalPages</DataSource>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>PendingPageId</Id>
            <Title>
                <Item key="default">Pending Payment Page</Item>
            </Title>
            <HelpText>
                <Item key="default">
                    The user is redirected to this page when returning from PayPal if the payment is not yet completed.
                    Otherwise, the rest of the actions down the stack are executed.
                </Item>
            </HelpText>
            <Type>Select</Type>
            <Settings>
                <DataSource>PortalPages</DataSource>
            </Settings>
        </Parameter>

        <Parameter>
            <Id>GenerateOrderId</Id>
            <Title>
                <Item key="default">Generate Unique Order ID</Item>
            </Title>
            <Type>Boolean</Type>
        </Parameter>

    </Action>


    <Action>
        <Id>RepostData</Id>
        <Title>
            <Item key="default">Repost Data</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action reposts the form to a different URL, ending executation of any actions that follow.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.RepostData, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Data</Group>
        </Settings>
        <Final>true</Final>

        <Parameter>
            <Id>Url</Id>
            <Title>
                <Item key="default">Url</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    The Url can be to same or different domain, relative or absolute. Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>PostData</Id>
            <Title>
                <Item key="default">Post Data</Item>
            </Title>
            <Type>Code</Type>
            <HelpText>
                <Item key="default">
                    Write one pair key=value per line. Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>RepostEverything</Id>
            <Title>
                <Item key="default">Repost Everything</Item>
            </Title>
            <Type>Boolean</Type>
            <HelpText>
                <Item key="default">
                    Enable this option to also repost all data in addition to fields above.
                </Item>
            </HelpText>
        </Parameter>

    </Action>

    <Action>
        <Id>InjectData</Id>
        <Title>
            <Item key="default">Inject Form Data</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action lets you add to form data manually.
                This is very useful for example to add data that is specific to the button that was clicked or to append data that you don't want exposed through hidden fields.
                Note that this is only valid for current action list. It does not persists until next list of actions executes for example on submit.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.Context.InjectData, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Context</Group>
        </Settings>

        <Parameter>
            <Id>Data</Id>
            <Title>
                <Item key="default">Data</Item>
            </Title>
            <Type>NameValueCollection</Type>
            <HelpText>
                <Item key="default">
                    Input the Name and Value for each data you want to inject.
                    It can be accessed later by using [NameHere] tokens.
                    Note that if data with same name already exists, it will get overwritten.
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
            <Settings>
                <NameColumn>Name</NameColumn>
                <ValueColumn>Value</ValueColumn>
                <ButtonName>Add Form Data</ButtonName>
            </Settings>

        </Parameter>

        <!--<Parameter>
            <Id>Data</Id>
            <Title>
                <Item key="default">Data</Item>
            </Title>
            <Type>Grid</Type>
            <HelpText>
                <Item key="default">
                    Input the Name and Value for each data you want to inject.
                    It can be accessed later by using [NameHere] tokens.
                    Note that if data with same name already exists, it will get overwritten.
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
            <Settings>
                <ButtonName>Add Form Data</ButtonName>
            </Settings>

            <Parameter>
                <Id>RepostEverything</Id>
                <Title>
                    <Item key="default">Repost Everything</Item>
                </Title>
                <Type>Boolean</Type>
                <HelpText>
                    <Item key="default">
                        Enable this option to also repost all data in addition to fields above.
                    </Item>
                </HelpText>
                <Settings>
                    <ColSize>2</ColSize>
                </Settings>
            </Parameter>

            <Parameter>
                <Id>Url</Id>
                <Title>
                    <Item key="default">Url</Item>
                </Title>
                <Type>Text</Type>
                <HelpText>
                    <Item key="default">
                        The Url can be to same or different domain, relative or absolute. Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                    </Item>
                </HelpText>
                <Settings>
                    <ColSize>5</ColSize>
                </Settings>
            </Parameter>
        </Parameter>-->

    </Action>


    <Action>
        <Id>LoadUser</Id>
        <Title>
            <Item key="default">Load User</Item>
        </Title>
        <HelpText>
            <Item key="default">
                A form runs in the context of a user. It could be the current user performing the submit or it could be the result of other actions.
                This lets you manually set a user. Note that this is only valid for current action list. It does not persists until next list of actions executes for example on submit.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.Context.LoadUser, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Context</Group>
        </Settings>

        <Parameter>
            <Id>Id</Id>
            <Title>
                <Item key="default">User Identifier</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    This could be the user ID, username or email.
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                    One common scenario is to use [QueryString:UserId] to read the user from the URL via My Tokens.
                </Item>
            </HelpText>
        </Parameter>

    </Action>

    <Action>
        <Id>AesEncrypt</Id>
        <Title>
            <Item key="default">AES Encrypt</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action lets you encrypt data with AES.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.Security.AESEncrypt, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Security</Group>
        </Settings>

        <Parameter>
            <Id>Key</Id>
            <Title>
                <Item key="default">AES Key</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    If you're setting up a new system, we've included a tool to <a href="GenerateAesKey.aspx" target="_blank">Generate your Key and Initialization Vector</a>
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>IV</Id>
            <Title>
                <Item key="default">IV Vector</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Fields</Id>
            <Title>
                <Item key="default">Fields</Item>
            </Title>
            <Type>NameValueCollection</Type>
            <HelpText>
                <Item key="default">
                    Specify field name that will be encrypted and the field value that will hold the encrypted name.
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
            <Settings>
                <NameColumn>Field to Encrypt</NameColumn>
                <ValueColumn>Store in Token</ValueColumn>
                <ButtonName>Add</ButtonName>
            </Settings>
        </Parameter>

    </Action>

    <Action>
        <Id>DecryptData</Id>
        <Title>
            <Item key="default">AES Decrypt</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action lets you decryp data with AES.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.Security.AESDecrypt, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Security</Group>
        </Settings>

        <Parameter>
            <Id>Key</Id>
            <Title>
                <Item key="default">Key</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    If you're setting up a new system, we've included a tool to <a href="GenerateAesKey.aspx" target="_blank">Generate your Key and Initialization Vector</a>
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>IV</Id>
            <Title>
                <Item key="default">IV</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Fields</Id>
            <Title>
                <Item key="default">Fields</Item>
            </Title>
            <Type>NameValueCollection</Type>
            <HelpText>
                <Item key="default">
                    Specify field name that will be decrypted and the token that will hold the encrypted name.
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
            <Settings>
                <NameColumn>Field to Decrypt</NameColumn>
                <ValueColumn>Store in Token</ValueColumn>
                <ButtonName>Add</ButtonName>
            </Settings>
        </Parameter>

    </Action>

    <Action>
        <Id>RSAEncrypt</Id>
        <Title>
            <Item key="default">RSA Encrypt</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action lets you encryption data, according selected algorithm.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.Security.RSAEncrypt, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Security</Group>
        </Settings>

        <Parameter>
            <Id>Key</Id>
            <Title>
                <Item key="default">Public Key</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Enter your Public Key.
                    If you're setting up a new system, we've included a tool to <a href="GenerateRsaKey.aspx" target="_blank">Generate Public and Private Key</a>.
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Fields</Id>
            <Title>
                <Item key="default">Fields</Item>
            </Title>
            <Type>NameValueCollection</Type>
            <HelpText>
                <Item key="default">
                    Specify field name that will be encrypted and the field value
                    that will hold the encrypted name.
                </Item>
            </HelpText>
            <Settings>
                <NameColumn>Field to Encrypt</NameColumn>
                <ValueColumn>Save in field</ValueColumn>
                <ButtonName>Add</ButtonName>
            </Settings>
        </Parameter>

    </Action>

    <Action>
        <Id>RSADecrypt</Id>
        <Title>
            <Item key="default">RSA Decrypt</Item>
        </Title>
        <HelpText>
            <Item key="default">
                This action lets you decryption data, according selected algorithm.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.Security.RSADecrypt, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Security</Group>
        </Settings>

        <Parameter>
            <Id>Key</Id>
            <Title>
                <Item key="default">Private Key</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Enter your private key.
                    If you're setting up a new system, we've included a tool to <a href="GenerateRsaKey.aspx" target="_blank">Generate Public and Private Key</a>
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>Fields</Id>
            <Title>
                <Item key="default">Fields</Item>
            </Title>
            <Type>NameValueCollection</Type>
            <HelpText>
                <Item key="default">
                    Specify field name that will be decrypted and the field value
                    that hold the encrypted name.
                </Item>
            </HelpText>
            <Settings>
                <NameColumn>Field to Decrypt</NameColumn>
                <ValueColumn>Save in field</ValueColumn>
                <ButtonName>Add</ButtonName>
            </Settings>
        </Parameter>

    </Action>

    <Action>
        <Id>ShowMessage</Id>
        <Title>
            <Item key="default">Display Message</Item>
        </Title>
        <HelpText>
            <Item key="default">Displays a confirmation message. The user has to click a button before the rest of the following actions, if any, are executed.</Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.ShowMessage, avt.ActionForm.Core</TypeStr>
        <Final>true</Final>
        <Settings>
            <Group>Message</Group>
        </Settings>

        <Parameter>
            <Id>Message</Id>
            <Title>
                <Item key="default">Message</Item>
            </Title>
            <Type>RichText</Type>
            <HelpText>
                <Item key="default">
                    Specify
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>ButtonsList</Id>
            <Title>
                <Item key="default">Action Buttons</Item>
            </Title>
            <HelpText>
                <Item key="default">
                    Optionally, bind one or more buttons from the form.
                    Watch out for referencing buttons recursively.
                </Item>
            </HelpText>
            <Type>MultipleFieldSelect</Type>
            <Settings>
                <FieldType>button</FieldType>
            </Settings>
            <DefaultValue>
                <Item key="default">[]</Item>
            </DefaultValue>
        </Parameter>
    </Action>

    <Action>
        <Id>UpdateForm</Id>
        <Title>
            <Item key="default">Update Form Data (AJAX)</Item>
        </Title>
        <HelpText>
            <Item key="default">
                Sends current context back to the browser, updating the form fields.
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.UpdateData, avt.ActionForm.Core</TypeStr>
        <Final>true</Final>
        <Settings>
            <Group>Message</Group>
        </Settings>

    </Action>

    <Action>
        <Id>ShowError</Id>
        <Title>
            <Item key="default">Display Error Message</Item>
        </Title>
        <HelpText>
            <Item key="default">Displays an error message. The user can't submit the form until the error is corrected.</Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.ShowError, avt.ActionForm.Core</TypeStr>
        <Final>true</Final>
        <Settings>
            <Group>Message</Group>
        </Settings>

        <Parameter>
            <Id>Message</Id>
            <Title>
                <Item key="default">Message</Item>
            </Title>
            <Type>RichText</Type>
            <HelpText>
                <Item key="default">
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

    </Action>

    <Action>
        <Id>SubmitAnyway</Id>
        <Title>
            <Item key="default">Submit without validation</Item>
        </Title>
        <HelpText>
            <Item key="default">Add this action to a validation event to have it bypass validation and submit the form with incomplete data.</Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.SubmitAnyway, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Data</Group>
        </Settings>

        <Final>true</Final>

    </Action>

    <!--<Action>
        <Id>KeepOnPage</Id>
        <Title>
            <Item key="default">Keep on Current Page</Item>
        </Title>
        <TypeStr>avt.ActionForm.Core.Form.Actions.MessageHtml, avt.ActionForm.Core</TypeStr>
    </Action>-->

    <Action>
        <Id>RedirectToUrl</Id>
        <Title>
            <Item key="default">Redirect to URL</Item>
        </Title>
        <TypeStr>avt.ActionForm.Core.Actions.RedirectToUrlAction, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Redirect</Group>
        </Settings>
        <Final>true</Final>
        <Parameter>
            <Id>Url</Id>
            <Title>
                <Item key="default">URL</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>
    </Action>

    <Action>
        <Id>RedirectToPage</Id>
        <Title>
            <Item key="default">Redirect to Portal Page</Item>
        </Title>
        <TypeStr>avt.ActionForm.Core.Actions.RedirectToPageAction, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Redirect</Group>
        </Settings>
        <Final>true</Final>
        <Parameter>
            <Id>PageId</Id>
            <Title>
                <Item key="default">Page</Item>
            </Title>
            <Type>Select</Type>
            <Settings>
                <DataSource>PortalPages</DataSource>
            </Settings>
            <HelpText>
                <Item key="default">
                </Item>
            </HelpText>
        </Parameter>

        <Parameter>
            <Id>QueryString</Id>
            <Title>
                <Item key="default">Query String</Item>
            </Title>
            <Type>Text</Type>
            <HelpText>
                <Item key="default">
                    Optionally provide a query string in the form of <em>param1=value1&amp;param2=value2...</em>.
                    Can contain form tokens (for example [Email]) and <a href="http://www.dnnsharp.com/dnn/modules/my-custom-tokens" target="_blank">My Tokens</a>.
                </Item>
            </HelpText>
        </Parameter>

    </Action>

    <Action>
        <Id>RedirectToFile</Id>
        <Title>
            <Item key="default">Send File for Download</Item>
        </Title>
        <HelpText></HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.RedirectToFileAction, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Redirect</Group>
        </Settings>
        <Final>true</Final>

        <Parameter>
            <Id>PortalFile</Id>
            <Title>
                <Item key="default">Portal File</Item>
            </Title>
            <Type>FilePicker</Type>
            <Settings>
                <Mode>Single</Mode>
            </Settings>
        </Parameter>

    </Action>

    <Action>
        <Id>ClearCacheKey</Id>
        <Title>
            <Item key="default">Clear Cache (by Key)</Item>
        </Title>
        <HelpText>
            <Item key="default">
                ASP.NET provides a cache where all components can save data. This action can be used to clear entries from the cache.
                To see a list of everything that's in cache, open the <a href="AdminApi.ashx?Method=ListCache">Cache Utility</a>
            </Item>
        </HelpText>
        <TypeStr>avt.ActionForm.Core.Actions.ClearCacheKey, avt.ActionForm.Core</TypeStr>
        <Settings>
            <Group>Data</Group>
        </Settings>
        <Final>true</Final>

        <Parameter>
            <Id>CacheKey</Id>
            <Title>
                <Item key="default">Cache Key</Item>
            </Title>
            <Type>Text</Type>
        </Parameter>

    </Action>

</Actions>
